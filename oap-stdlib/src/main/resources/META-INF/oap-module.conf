name = oap
services {
  oap-time-java {
    name = oap-time
    profile = java-time
    implementation = oap.time.JavaTimeService
  }

  oap-time-joda {
    name = oap-time
    profile = -java-time
    implementation = oap.time.JodaTimeService
  }

  oap-http-apache-server {
    implementation = oap.http.server.apache.ApacheHttpServer
    profile = http
    name = oap-http-server
    parameters {
      workers = 500
      queueSize = 0
      registerStatic = false
      keepAliveTimeout = 5s
      originalServer = "OAP Server/4.0"
      responseDate = true
      healthHttpHandler = modules.this.oap-http-health-handler
      rejected {
        code = 503
        reason = "temporary overload"
      }
    }
    supervision.supervise = true
  }

  oap-http-listener-plain {
    profile = http-plain
    implementation = oap.http.server.apache.PlainHttpListener
    parameters {
      port = <change me>
      server = modules.this.oap-http-server
      backlog = 50
    }
    supervision {
      supervise = true
      thread = true
    }
  }

  oap-http-listener-ssl {
    profile = http-ssl
    implementation = oap.http.server.apache.SslHttpListener
    parameters {
      port = <change me>
      server = this.oap-http-server
      keystoreLocation = "/etc/oap/keystore.jks"
      keystorePassword = "changeit"
    }
    supervision.thread = true
  }

  oap-http-listener-local {
    profile = http-local
    implementation = oap.http.server.apache.LocalHttpListener
    parameters {
      port = <change me>
      server = modules.this.oap-http-server
    }
    supervision.thread = true
  }

  oap-http-health-handler {
    implementation = oap.http.server.health.HealthHttpHandler
    profile = http
    parameters {
      providers = []
    }
  }

  corsPolicy-generic {
    implementation = oap.http.cors.GenericCorsPolicy
    profile = http
    parameters {
      allowOrigin = "*"
      allowHeaders = "Content-type, Authorization, Set-cookie"
      allowCredentials = true
      allowMethods = [HEAD, POST, GET, PUT, DELETE, OPTIONS]
    }
  }

  corsPolicy-subdomain {
    implementation = oap.http.cors.PatternCorsPolicy
    profile = http
    parameters {
      domainRegexp = "^[^:/]*\\.oaplatform\\.org$"
      allowHeaders = "Content-type, Authorization, Set-cookie, Cookie"
      allowCredentials = true
      allowMethods = [HEAD, POST, GET, PUT, DELETE, OPTIONS]
    }
  }

  remoting {
    implementation = oap.application.remote.Remote
    profile = remoting
    parameters {
      //      port = 8980
      port = <change me>
      context = /remote/
      serialization = DEFAULT
      kernel = kernel.self
      timeout = 1m
    }
    supervision.supervise = true
  }

  prometheus-jvm-exporter {
    implementation = oap.prometheus.PrometheusJvmExporter
    parameters {
      enableClassLoaderMetrics = true
      enableJvmMemoryMetrics = true
      enableJvmGcMetrics = true
      enableLogbackMetrics = true
      enableJvmThreadMetrics = true
    }
    supervision.supervise = true
  }

  prometheus-application-info-exporter {
    implementation = oap.prometheus.PrometheusApplicationInfoExporter
    supervision.supervise = true
  }
}
